name: export-package-layer
on:
  pull_request:
    paths:
      - .github/workflows/export-package-layer.yml
  workflow_call:
    secrets:
      token:
        description: "GitHub token to use for authentication"
        required: true
    inputs:
      oocana:
        description: "Oocana release tag to download. Defaults to latest"
        required: false
        type: string
        default: "latest"
      ovmlayer:
        description: "Version of the ovmlayer package to use. Defaults to ovmlayer@0.5.1"
        required: false
        type: string
        default: ovmlayer@0.5.1
      rootfs:
        description: "rootfs tar"
        required: false
        type: string
        default: "studio-rootfs@1.1.0"

      package-name:
        description: "Name of the package to create."
        required: true
        type: string
      
      version:
        description: "Version of the package to create."
        required: true
        type: string
      registry:
        description: "Container registry to use for publishing the package."
        required: false
        default: "https://registry.oomol.com"
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  arguments-check:
    if: ${{ github.event.repository.full_name != 'oomol/ovmlayer-rootfs' }}
    runs-on: ubuntu-latest
    steps:
      - name: check argument
        run: |
          if [ -z "${{ inputs.package-name }}" ]; then
            echo "Error: package-name is required"
            exit 1
          fi
          if [ -z "${{ inputs.version }}" ]; then
            echo "Error: version is required"
            exit 1
          fi
  export-layer:
    if: ${{ github.event.repository.full_name != 'oomol/ovmlayer-rootfs' }} # https://github.com/actions/runner/issues/3146
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    needs: [arguments-check]
    steps:
      - name: architecture
        run: |
          echo "architecture=${{ (runner.arch == 'ARM64' || runner.arch == 'ARM') && 'arm64' || 'amd64' }}" >> $GITHUB_OUTPUT
        id: arch
      - uses: actions/checkout@v4
      - uses: oomol/ovmlayer-rootfs/.github/actions/layer@main
        with:
          token: ${{ secrets.token }}
          oocana: ${{ inputs.oocana }}
          ovmlayer: ${{ inputs.ovmlayer }}
          rootfs: ${{ inputs.rootfs }}
          architecture: ${{ steps.arch.outputs.architecture }}
      - name: create layer
        run: |
          oocana package-layer create ${{ github.workspace }}
      - name: export layer
        run: |
          oocana package-layer export ${{ github.workspace }} ${{ runner.temp }}/export
      - name: Zip layer
        run: |
          cd ${{ runner.temp }}/export
          zip -r ${{ steps.arch.outputs.architecture }}-layer.zip .
      - name: Upload layer
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.arch.outputs.architecture }}-layer
          path: ${{ runner.temp }}/export/${{ steps.arch.outputs.architecture }}-layer.zip

  # TODO: refactor it to a nodejs composite action
  upload-layer:
    if: ${{ github.event.repository.full_name != 'oomol/ovmlayer-rootfs' }} #
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: [export-layer]
    steps:
      - name: download layer
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/export
          merge-multiple: true
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.11.1 @actions/http-client
        shell: bash
      - name: Get Id Token
        uses: actions/github-script@v7
        id: id_token
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()
            coredemo.setOutput('id_token', id_token)
      - name: Upload Layer 
        run: |
            set -x
            cd ${{ runner.temp }}/export
            for layer_zip in $(pwd)/*; do
              if [ -f "$layer_zip" ]; then
                echo "Processing $layer_zip"
                file=$(basename $layer_zip)
                response=$(curl --fail-with-body -X POST -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" -d "{\"fileKey\": \"$file\"}" ${{ inputs.registry }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/presigned-upload-url)
                curl --fail-with-body -X PUT -H "Content-Type: application/octet-stream" -T ./$file "$response"
              fi
            done
      - name: Post layer # {"key1": "file2", "key2": "file2"}
        run: |
          set -x
          cd ${{ runner.temp }}/export
          payload="{"
          first=true
          for layer_zip in $(pwd)/*; do
            if [ -f "$layer_zip" ]; then
              if [ "$first" = true ]; then
                first=false
              else
                payload+=","
              fi
              file=$(basename "$layer_zip")
              key=$(echo "$file" | sed 's/-layer\.zip$//')
              payload+="\"$key\":\"$file\""
            fi
          done
          payload+="}"
          echo "Payload: $payload"
          curl --fail-with-body -X PUT -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" -d "$payload" ${{ inputs.registry }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/file-paths