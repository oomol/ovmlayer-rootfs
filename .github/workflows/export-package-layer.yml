name: export-package-layer
on:
  pull_request:
    paths:
      - .github/workflows/export-package-layer.yml
      - .github/actions/layer/**
  workflow_call:
    secrets:
      token:
        description: "GitHub token to use for authentication"
        required: true
    inputs:
      oocana:
        description: "Oocana release tag to download. Defaults to latest"
        required: false
        type: string
        default: "latest"
      ovmlayer:
        description: "Version of the ovmlayer package to use. Defaults to ovmlayer@0.5.1"
        required: false
        type: string
        default: ovmlayer@0.5.1
      rootfs:
        description: "rootfs tar"
        required: false
        type: string
        default: "studio-rootfs@1.0.0"

      package-name:
        description: "Name of the package to create."
        required: true
        type: string
      
      version:
        description: "Version of the package to create."
        required: true
        type: string

env:
  REGISTRY_URL: https://registry.oomol.dev
  STATIC_URL: https://static.oomol.com

permissions:
  contents: read
  id-token: write

jobs:
  test-layer-action:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.repository.full_name == 'oomol/ovmlayer-rootfs' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/layer
        with:
          architecture: ${{ (runner.arch == 'ARM64' || runner.arch == 'ARM') && 'arm64' || 'amd64' }}

  export-layer:
    if: ${{ github.event.repository.full_name != 'oomol/ovmlayer-rootfs' }} # https://github.com/actions/runner/issues/3146
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    steps:
      - name: architecture
        run: |
          echo "architecture=${{ (runner.arch == 'ARM64' || runner.arch == 'ARM') && 'arm64' || 'amd64' }}" >> $GITHUB_OUTPUT
        id: arch
      - uses: actions/checkout@v4
      - uses: oomol/ovmlayer-rootfs/.github/actions/layer@main
        with:
          token: ${{ secrets.token }}
          oocana: ${{ inputs.oocana }}
          ovmlayer: ${{ inputs.ovmlayer }}
          rootfs: ${{ inputs.rootfs }}
          architecture: ${{ steps.arch.outputs.architecture }}
      - name: create layer
        run: |
          oocana package-layer create ${{ github.workspace }}
      - name: export layer
        run: |
          oocana package-layer export ${{ github.workspace }} ${{ runner.temp }}/export
      # - name: Upload layer # used for debug
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ steps.arch.outputs.architecture }}-layer
      #     path: ${{ runner.temp }}/export
      - name: Zip layer
        run: |
          cd ${{ runner.temp }}/export
          zip -r ${{ steps.arch.outputs.architecture }}-layer.zip .
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.11.1 @actions/http-client
        shell: bash
      - name: Get Id Token
        uses: actions/github-script@v7
        id: id_token
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()
            coredemo.setOutput('id_token', id_token)
      - name: Get url
        run: |
            response=$(curl --fail-with-body -X POST -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" -d '{"fileKey": "${{ steps.arch.outputs.architecture }}-layer.zip"}' ${{ env.REGISTRY_URL }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/presigned-upload-url)
            echo "response=$response" >> $GITHUB_OUTPUT
        id: get_url
      - name: Upload layer
        run: |
          curl --fail-with-body -X PUT -H "Content-Type: application/octet-stream" -T ${{ runner.temp }}/export/${{ steps.arch.outputs.architecture }}-layer.zip "${{ steps.get_url.outputs.response }}"
          echo "url=${{ env.REGISTRY_URL }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/${{ steps.arch.outputs.architecture }}-layer.zip" >> $GITHUB_OUTPUT

  post-layer-json:
    if: ${{ github.event.repository.full_name != 'oomol/ovmlayer-rootfs' }} #
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: [export-layer]
    steps:
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.11.1 @actions/http-client
        shell: bash
      - name: Get Id Token
        uses: actions/github-script@v7
        id: id_token
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()
            coredemo.setOutput('id_token', id_token)
      - name: Post Layer files
        run: |
          echo "Layer exported successfully."
          curl --fail-with-body -X PUT -H "Content-Type: application/json" -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -d '{"amd64": "${{ env.STATIC_URL }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/amd64-layer.zip", "arm64": "${{ env.STATIC_URL }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/arm64-layer.zip"}' ${{ env.REGISTRY_URL }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/file-paths
      - name: get
        run: |
          curl --fail-with-body -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" https://registry.oomol.dev/-/oomol/packages/layer-example/0.0.1/layers/file-paths