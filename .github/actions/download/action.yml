name: download
description: "Download ovmlayer and oocana environment"
inputs:
  token:
    description: "GitHub token"
    required: true
    default: ${{ github.token }}
  architecture:
    description: "rootfs tar"
    required: false
    default: "amd64"
  oocana:
    description: "oocana tag"
    required: false
    default: v0.30.2
  ovmlayer:
    description: "ovmlayer@0.5.1"
    required: false
    default: ovmlayer@0.5.1
  rootfs:
    description: "rootfs tar"
    required: false
    default: "base-rootfs@0.4.0"

runs:
  using: "composite"
  steps:
    - name: check inputs
      run: |
        echo "Architecture: ${{ inputs.architecture }}"
        echo "Oocana version: ${{ inputs.oocana }}"
        echo "Ovmlayer version: ${{ inputs.ovmlayer }}"
        echo "Rootfs: ${{ inputs.rootfs }}"
        if [ ${{ inputs.architecture }} != "amd64" ] && [ ${{ inputs.architecture }} != "arm64" ]; then
          echo "Invalid architecture: ${{ inputs.architecture }}"
          exit 1
        fi
      shell: bash
    - name: mkdir 
      run: |
        mkdir -p $(pwd)/${inputs.architecture}
      shell: bash
    # TODO: Download oocana from npm package, so that it can keep updating. It should install oocana by npm, currently @oomol/oocana does not add oocana binary to PATH, so we download cli binary directly for now.
    - name: download oocana
      run: |
        if [ "${{ inputs.architecture }}" = "amd64" ]; then
          gh release download ${{ inputs.oocana }} --repo oomol/oocana-rust --pattern "oocana-cli-x86_64-unknown-linux-gnu.tar.gz" -O oocana-cli.tar.gz
          tar -xf oocana-cli.tar.gz -C /tmp
          mv /tmp/oocana-cli-x86_64-unknown-linux-gnu $(pwd)/${inputs.architecture}/oocana
        elif [ "${{ inputs.architecture }}" = "arm64" ]; then
          gh release download ${{ inputs.oocana }} --repo oomol/oocana-rust --pattern "oocana-cli-aarch64-unknown-linux-gnu.tar.gz" -O oocana-cli.tar.gz
          tar -xf oocana-cli.tar.gz -C /tmp
          mv /tmp/oocana-cli-aarch64-unknown-linux-gnu $(pwd)/${inputs.architecture}/oocana
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: download ovmlayer
      run: |
        if [ "${{ inputs.architecture }}" = "amd64" ]; then
          gh release download ${{ inputs.ovmlayer }} --repo oomol/ovmlayer-rootfs --pattern "ovmlayer_amd64.tar.zst" -O ovmlayer.tar.zst
        elif [ "${{ inputs.architecture }}" = "arm64" ]; then
          gh release download ${{ inputs.ovmlayer }} --repo oomol/ovmlayer-rootfs --pattern "ovmlayer_arm64.tar.zst" -O ovmlayer.tar.zst
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: extract ovmlayer
      run: |
        mkdir -p /tmp/ovmlayer
        zstd -d ovmlayer.tar.zst -o /tmp/ovmlayer.tar
        tar -xf /tmp/ovmlayer.tar -C $(pwd)/${inputs.architecture}
      shell: bash

    - name: download rootfs
      run: |
          gh release download ${{ inputs.rootfs }} --repo oomol/ovmlayer-rootfs --pattern "${{inputs.architecture}}-rootfs.tar" -O $(pwd)/${inputs.architecture}/rootfs.tar
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: show downloaded files
      run: |
        ls -l $(pwd)
      shell: bash